Diagonal Tree Traversal


Given a Binary Tree, return the diagonal traversal of the binary tree.

Consider lines of slope -1 passing between nodes. Given a Binary Tree, return a single list containing all diagonal elements in a binary tree belonging to same line.
If the diagonal element are present in two different subtrees then left subtree diagonal element should be taken first and then right subtree. 

Examples :

Input : root = [8, 3, 10, 1, 6, N, 14, N, N, 4, 7, 13]
            8
         /     \
        3      10
      /   \      \
     1     6     14
         /   \   /
        4     7 13
Output : [8, 10, 14, 3, 6, 7, 13, 1, 4]
Explanation:
unnamed
Diagonal Traversal of binary tree : 8 10 14 3 6 7 13 1 4

Input: root = [1, 2, N, 3, N]
                1
               /
              2
             /
            3
Output: [1, 2, 3]
Constraints:
1 <= number of nodes<= 105
1 <= node->data <= 105



class Tree
{
     public ArrayList<Integer> diagonal(Node root)
      {
           //add your code here.
           ArrayList<Integer> ans = new ArrayList<>();
           HashMap<Integer,ArrayList<Integer>> levelData = new HashMap<>();
           diagRecur(root,0,levelData);
           int level = 0;
           while(levelData.containsKey(level)){
               ArrayList<Integer> li = levelData.get(level);
               ans.addAll(li);
               level++;
           }
           return ans;
      }
      static void diagRecur(Node root, int level, HashMap<Integer,ArrayList<Integer>> levelData){
          if(root==null) return;
          levelData.computeIfAbsent(level,k->new ArrayList<>()).add(root.data);
          diagRecur(root.left,level+1,levelData);
          diagRecur(root.right,level,levelData);
      }
}