Check for BST


Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
Examples:

Input: root[] = [2, 1, 3, N, N, N, 5]
   2
 /    \
1      3
        \
         5
Output: true 
Explanation: 
The left subtree of every node contains smaller keys and right subtree of every node contains greater. Hence, the tree is a BST.
Input: root[] = [2, N, 7, N, 6, N, 9]
  2
   \
    7
     \
      6
       \
        9
Output: false 
Explanation: 
Since the node with value 7 has right subtree nodes with keys less than 7, this is not a BST. 
Input: root[] = [10, 5, 20, N, N, 9, 25]
   10
 /    \
5      20
      /   \
     9     25
Output: false
Explanation: The node is present in the right subtree of 10, but it is smaller than 10.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 109




class Solution {
    // Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node root) {
        // code here.
        return isBSTUtil(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
    boolean isBSTUtil(Node root, int min,int max){
        if(root==null) return true;
        if(root.data<min || root.data>max) return false;
        return isBSTUtil(root.left,min,root.data)&&isBSTUtil(root.right,root.data,max);
    }
}