Longest Sub-Array with Sum K


Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. It is guaranteed that a valid subarray exists.

Examples:

Input: arr[] = [10, 5, 2, 7, 1, 9], k = 15
Output: 4
Explanation: The subarray [5, 2, 7, 1] has a sum of 15 and length 4.
Input: arr[] = [-1, 2, -3], k = -2
Output: 3
Explanation: The subarray [-1, 2, -3] has a sum of -2 and length 3.
Input: arr[] = [1, -1, 5, -2, 3], k = 3
Output: 4
Explanation: The subarray [1, -1, 5, -2] has a sum of 3 and a length 4.
Constraints:
1 ≤ arr.size() ≤ 106
-109 ≤ arr[i], k ≤ 109



class Solution {
    public int lenOfLongestSubarr(int[] arr, int k) {
        // code here
        HashMap<Integer,Integer> hm = new HashMap<>();
        int currentSum = 0;
        int maxLength = 0;
        for(int i = 0;i<arr.length;i++){
            currentSum+=arr[i];
            if(currentSum==k){
                maxLength = i+1;
            }
            if(hm.containsKey(currentSum-k)){
                maxLength = Math.max(maxLength,i-hm.get(currentSum-k));
            }
            if(!hm.containsKey(currentSum)){
                hm.put(currentSum,i);
            }
        }
        return maxLength;
    }
}