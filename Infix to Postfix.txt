Infix to Postfix



Given an infix expression in the form of string str. Convert this infix expression to postfix expression.

Infix expression: The expression of the form a op b. When an operator is in-between every pair of operands.
Postfix expression: The expression of the form a b op. When an operator is followed for every pair of operands.
Note: The order of precedence is: ^ greater than * equals to / greater than + equals to -. Ignore the right associativity of ^.
Example 1:

Input: str = "a+b*(c^d-e)^(f+g*h)-i"
Output: abcd^e-fgh*+^*+i-
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be abcd^e-fgh*+^*+i-
Example 2:

Input: str = "A*(B+C)/D"
Output: ABC+*D/
Explanation:
After converting the infix expression 
into postfix expression, the resultant 
expression will be ABC+*D/
 
Your Task:
This is a function problem. You only need to complete the function infixToPostfix() that takes a string(Infix Expression) as a parameter and returns a string(postfix expression). The printing is done automatically by the driver code.

Expected Time Complexity: O(|str|).
Expected Auxiliary Space: O(|str|).

Constraints:
1 ≤ |str| ≤ 105








class Solution {
    // Function to convert an infix expression to a postfix expression.
    public static String infixToPostfix(String exp) {
        // Your code here
        Stack<Character> s =  new Stack<>();
        StringBuilder res = new StringBuilder();
        for(int i = 0;i<exp.length();i++){
            char c = exp.charAt(i);
            if((c>='a' && c<='z')||(c>='A' && c<='Z')||(c>='0' && c<='9')){
                res.append(c);
                
            }
            else if(c==')'){
                while(s.peek()!='('){
                    res.append(s.pop());
                }
                s.pop();
            }
            else if(c=='('){
                s.push(c);
            }
            else{
                while(!s.isEmpty()&&(prec(c)<prec(s.peek())||prec(c)==prec(s.peek()))){
                    res.append(s.pop());
                }
                s.push(c);
                
            }
        }
        while(!s.isEmpty()){
            res.append(s.pop());
        }
        return res.toString();
        
            
    }
    static int prec(char c){
            int p;
            if(c=='^') p = 3;
            else if(c=='*' || c=='/') p =2;
            else if(c=='+'||c=='-') p =1;
            else p = -1;
            return p;
    }
}