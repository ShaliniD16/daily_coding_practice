Combination Sum II


Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30



class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> ds = new ArrayList<>();
        Arrays.sort(candidates);
        recurCombination(0,target,ds,candidates,result);
        return result;

    }
    public void recurCombination(int ind, int target, List<Integer> ds, int[] candidates,List<List<Integer>> result){
        if(target==0){
            result.add(new ArrayList<>(ds));
            return;
        }
        for(int i = ind;i<candidates.length;i++){
            if(i>ind && candidates[i]==candidates[i-1]) continue;
            if(target<candidates[i]) break;
            ds.add(candidates[i]);
            recurCombination(i+1,target-candidates[i],ds,candidates,result);
            ds.remove(ds.size()-1);
        }
        
    }
}