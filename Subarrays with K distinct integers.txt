Subarrays with K distinct integers

Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i], k <= nums.length



class Solution {
    public int subarraysWithKDistinct(int[] nums, int k) {
        return subarraysWithAtmostKDistinct(nums,k) - subarraysWithAtmostKDistinct(nums,k-1);
    }
    int subarraysWithAtmostKDistinct(int[] nums, int k){
        int left = 0, right = 0, ans = 0;
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(right = 0;right<nums.length;right++){
            int end = nums[right];
            hm.put(end,hm.getOrDefault(end,0)+1);
            while(hm.size()>k){
                int start = nums[left];
                hm.put(start,hm.get(start)-1);
                if(hm.get(start)==0) hm.remove(start);
                left++;
            }
            ans += right-left+1;
        }
        return ans;
    }
}