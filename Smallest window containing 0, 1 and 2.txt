Smallest window containing 0, 1 and 2

Given a string S consisting of the characters 0, 1 and 2. Your task is to find the length of the smallest substring of string S that contains all the three characters 0, 1 and 2. If no such substring exists, then return -1.

Example 1:

Input:
S = 10212
Output:
3
Explanation:
The substring 102 is the smallest substring
that contains the characters 0, 1 and 2.
Example 2:

Input: 
S = 12121
Output:
-1
Explanation: 
As the character 0 is not present in the
string S, therefor no substring containing
all the three characters 0, 1 and 2
exists. Hence, the answer is -1 in this case.
Your Task:
Complete the function smallestSubstring() which takes the string S as input, and returns the length of the smallest substring of string S that contains all the three characters 0, 1 and 2.

Expected Time Complexity: O( length( S ) )
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ length( S ) ≤ 105
All the characters of String S lies in the set {'0', '1', '2'}



class Solution {
    public int smallestSubstring(String S) {
        // Code here
        int unique = 3;
        int count = 0;
        int minlength = S.length();
        int l = 0;
        HashSet<Character> hs = new HashSet<>();
        for(int i = 0;i<S.length();i++){
            hs.add(S.charAt(i));
        }
        if(hs.size()!=unique) return -1;
        HashMap<Character, Integer> hm = new HashMap<>();
        for(int i = 0;i<S.length();i++){
            char endChar = S.charAt(i);
            hm.put(endChar, hm.getOrDefault(endChar,0)+1);
            if(hm.get(endChar)==1) count++;
            while(count==unique){
                minlength = Math.min(minlength, i-l+1);
                char startChar = S.charAt(l);
                hm.put(startChar, hm.get(startChar)-1);
                if(hm.get(startChar)==0) count--;
                l++;
            }
        }
        
        return minlength;
    }
};
