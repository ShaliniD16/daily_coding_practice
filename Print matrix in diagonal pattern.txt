Print matrix in diagonal pattern


Given a square matrix mat[][] of n*n size, the task is to determine the diagonal pattern which is a linear arrangement of the elements of the matrix as depicted in the following example:



Example 1:

Input:
n = 3
mat[][] = {{1, 2, 3},
           {4, 5, 6},
           {7, 8, 9}}
Output: {1, 2, 4, 7, 5, 3, 6, 8, 9}
Explaination:
Starting from (0, 0): 1,
Move to the right to (0, 1): 2,
Move diagonally down to (1, 0): 4,
Move diagonally down to (2, 0): 7,
Move diagonally up to (1, 1): 5,
Move diagonally up to (0, 2): 3,
Move to the right to (1, 2): 6,
Move diagonally up to (2, 1): 8,
Move diagonally up to (2, 2): 9
There for the output is {1, 2, 4, 7, 5, 3, 6, 8, 9}.
Example 2:

Input:
n = 2
mat[][] = {{1, 2},
           {3, 4}}
Output: {1, 2, 3, 4}
Explaination:
Starting from (0, 0): 1,
Move to the right to (0, 1): 2,
Move diagonally down to (1, 0): 3,
Move to the right to (1, 1): 4
There for the output is {1, 2, 3, 4}.


class Solution {
    public int[] matrixDiagonally(int[][] mat) {
        int i = 0,j=0;
        int n = mat.length;
        int isUp = 1;
        int[] res = new int[n*n];
        int l = 0;
        res[l++] = mat[i][j];
        for(int k = 1;k<n*n;k++){
            if (isUp==1){
                if(j==n-1){
                    i++;
                    isUp = 0;
                }
                else if(i==0){
                    j++;
                    isUp = 0;
                }
                else{
                    i--;
                    j++;
                    
                }
            }
            else{
                if(i==n-1){
                    j++;
                    isUp = 1;
                }
                else if(j==0){
                    i++;
                    isUp = 1;
                }
                else{
                    i++;
                    j--;
                }
            }
            res[l++] = mat[i][j];
        }
        
       
        return res;
    }
}