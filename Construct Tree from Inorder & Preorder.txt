Construct Tree from Inorder & Preorder

Given two arrays representing the inorder and preorder traversals of a binary tree, construct the tree and return the root node of the constructed tree.

Note: The output is written in postorder traversal.

Examples:

Input: inorder[] = [1, 6, 8, 7], preorder[] = [1, 6, 7, 8]
Output: [8, 7, 6, 1]
Explanation: The tree will look like

Input: inorder[] = [3, 1, 4, 0, 2, 5], preorder[] = [0, 1, 3, 4, 2, 5]
Output: [3, 4, 1, 5, 2, 0]
Explanation: The tree will look like

Input: inorder[] = [2, 5, 4, 1, 3], preorder[] = [1, 4, 5, 2, 3]
Output: [2, 5, 4, 3, 1]
Explanation: The tree will look like

Constraints:
1 ≤ number of nodes ≤ 103
0 ≤ nodes -> data ≤ 103
Both the inorder and preorder arrays contain unique values.


class Solution {
    public static Node buildTree(int inorder[], int preorder[]) {
        // code here
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int i = 0 ;i<inorder.length;i++){
            hm.put(inorder[i],i);
        }
        Node root = build(inorder,0,inorder.length-1,preorder,0,preorder.length-1,hm);
        return root;
    }
    static Node build(int[] inorder, int instart, int inend,int[] preorder,int prestart,int preend,HashMap<Integer,Integer> hm){
        if(instart>inend || prestart>preend) return null;
        Node root = new Node(preorder[prestart]);
        int inroot = hm.get(root.data);
        int numleft = inroot - instart;
        root.left = build(inorder,instart,inroot-1,preorder,prestart+1,prestart+numleft,hm);
        root.right = build(inorder,inroot+1,inend,preorder,prestart+numleft+1,preend,hm);
        return root;
    }
}