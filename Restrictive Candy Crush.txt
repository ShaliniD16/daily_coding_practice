Restrictive Candy Crush

Given a string s and an integer k, the task is to reduce the string by applying the following operation:
Choose a group of k consecutive identical characters and remove them.

The operation can be performed any number of times until it is no longer possible.

Example 1:

Input:
k = 2
s = "geeksforgeeks"
Output:
gksforgks
Explanation:
Modified String after each step: 
"geeksforgeeks" -> "gksforgks"
Example 2:

Input:
k = 2
s = "geegsforgeeeks" 
Output:
sforgeks
Explanation:
Modified String after each step:
"geegsforgeeeks" -> "ggsforgeks" -> "sforgeks"
Your Task:  
You don't need to read input or print anything. Complete the function Reduced_String() which takes integer k and string s as input parameters and returns the reduced string.

Expected Time Complexity: O(|s|)
Expected Auxiliary Space: O(|s|)

Constraints:
1 ≤ |s| ≤ 105
1 ≤ k ≤ |s|



class Solution
{
    public static String reduced_String(int k, String s)
    {
        // Your code goes here
        Stack<Pair> st = new Stack<>();
        if(k==1) return "";
        for(char c:s.toCharArray()){
            if(!st.isEmpty()&&c==st.peek().character){
                st.peek().count+=1;
                if(st.peek().count==k){
                    st.pop();
                }
            }
            else{
                st.push(new Pair(c,1));
            }
        }
        StringBuilder res = new StringBuilder();
        for(Pair p:st){
            res.append(String.valueOf(p.character).repeat(p.count));
        }
        return res.toString();
        
    }
    static class Pair{
        char character;
        int count;
        Pair(char character, int count){
            this.character = character;
            this.count = count;
        }
    }
}