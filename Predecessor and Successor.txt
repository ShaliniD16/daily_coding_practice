Predecessor and Successor


You are given root node of the BST and an integer key. You need to find the in-order successor and predecessor of the given key. If either predecessor or successor is not found, then set it to NULL.

Note:- In an inorder traversal the number just smaller than the target is the predecessor and the number just greater than the target is the successor. 

Examples :

Input: root[] = [8, 1, 9, N, 4, N, 10, 3, N, N, N]
      8
    /   \
   1     9
   \      \
    4      10
   /
  3
key = 8
Output: 4 9
Explanation: In the given BST the inorder predecessor of 8 is 4 and inorder successor of 8 is 9.
Input: root[] = [10, 2, 11, 1, 5, N, N, N, N, 3, 6, N, 4, N, N]
      10
    /   \
   2     11
  / \
 1   5
    / \
   3   6
    \
     4
key = 11
Output: 10 -1
Explanation: In given BST, the inorder predecessor of 11 is 10 whereas it does not have any inorder successor.
Input: root[] = [2, 1, 3]
      2
    /   \
   1     3
key = 3
Output: 2 -1
Constraints: 
1 <= Number of nodes <= 105
1 <= key <= 106


class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        // code here.
        // update pre[0] with the predecessor of the key
        // update suc[0] with the successor of the key
        
        while(root!=null){
            if(root.data>key){
                suc[0]=root;
                root = root.left;
            }
            else if(root.data<key){
                pre[0] = root;
                root = root.right;
            }
            else{
                if(root.left!=null){
                    pre[0]=rightmost(root.left);
                }
                if(root.right!=null){
                    suc[0] = leftmost(root.right);
                }
                break;
            }
        }
        
    }
    static Node rightmost(Node node){
        while(node.right!=null){
            node = node.right;
        }
        return node;
    }
    static Node leftmost(Node node){
        while(node.left!=null){
            node = node.left;
            
        }
        return node;
    }
}