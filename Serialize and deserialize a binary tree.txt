Serialize and deserialize a binary tree

Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]
      
Output: [2, 1, 3]
Input: root = [10, 20, 30, 40, 60, N, N]
      
Output: [40, 20, 60, 10, 30]
Constraints:
1 <= Number of nodes <= 104
1 <= Data of a node <= 109



class Tree {
    // Function to serialize a tree and return a list containing nodes of tree.
    public ArrayList<Integer> serialize(Node root) {
        // code here
        ArrayList<Integer> res = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            Node curr = q.poll();
            if(curr==null){
                res.add(-1);
                continue;
            }
            res.add(curr.data);
            q.add(curr.left);
            q.add(curr.right);
        }
        return res;
    }

    // Function to deserialize a list and construct the tree.
    public Node deSerialize(ArrayList<Integer> arr) {
        // code here
        Queue<Node> q = new LinkedList<>();
        
        Node n = new Node(arr.get(0));
        q.add(n);
        for(int i = 1;i<arr.size();i++){
            Node curr = q.poll();
            if(arr.get(i)!=-1){
                curr.left=new Node(arr.get(i));
                q.add(curr.left);
            }
            if(arr.get(++i)!=-1){
                curr.right=new Node(arr.get(i));
                q.add(curr.right);
            }
        }
        return n;
    }
};