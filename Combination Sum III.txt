Combination Sum III


Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 

Constraints:

2 <= k <= 9
1 <= n <= 60



class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int[] a = {1,2,3,4,5,6,7,8,9};
        List<List<Integer>> res = new ArrayList<>();
        findCombination(0,n,new ArrayList<>(),a,res,k);
        return res;
    }
    public void findCombination(int ind, int target, ArrayList<Integer> ds, int[] a, List<List<Integer>> res,int k){
        if(ds.size()==k){
            if(target==0){
                res.add(new ArrayList<>(ds));
            }
            return;
        }
        for(int i = ind;i<a.length;i++){
            if(i>ind && a[i]==a[i-1]) continue;
            if(target<a[i]) break;
            ds.add(a[i]);
            findCombination(i+1,target-a[i],ds,a,res,k);
            ds.remove(ds.size()-1);
        }

    }
}