Largest subtree sum in a tree


Given a binary tree. The task is to find subtree with maximum sum in the tree and return its sum.

Example 1:

Input:
              1
            /   \
           2      3
          / \    / \
         4   5  6   7
Output: 28
Explanation: 
As all the tree elements are positive,
the largest subtree sum is equal to
sum of all tree elements.

Example 2:
Input:
               1
            /    \
          -2      3
          / \    /  \
         4   5  -6   2
Output: 7
Explanation: 
Subtree with largest sum is : 
  -2
 /  \ 
4    5
Also, entire tree sum is also 7.
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function findLargestSubtreeSum() which takes the root of a binary tree and returns an integer.
 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= N <= 10^5
-10^3 <= tree.val <= 10^3



class Solution {
    public static int findLargestSubtreeSum(Node root) {
        // code here
        List<List<Node>> levels = new ArrayList<>();
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        HashMap<Node, Integer> hm = new HashMap<>();
        int ans = Integer.MIN_VALUE;
        
        while(!q.isEmpty()){
            int n = q.size();
            List<Node> level = new ArrayList<>();
            while(n-- > 0){
            
            
            Node node = q.poll();
            level.add(node);
            if(node.left!=null){
                q.add(node.left);
            }
            if(node.right!=null){
                q.add(node.right);
            }
            
            }
            levels.add(level);
        }
        for(int i = levels.size()-1;i>=0;i--){
            for(Node n : levels.get(i)){
                hm.put(n,n.data);
                if(n.left!=null){
                    hm.put(n,hm.get(n)+hm.get(n.left));
                }
                if(n.right!=null){
                    hm.put(n,hm.get(n)+hm.get(n.right));
                }
                ans = Math.max(ans,hm.get(n));
            }
            
        }
        return ans;
        
        
    }
}