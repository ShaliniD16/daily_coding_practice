Smallest window containing all characters of another string


Given two strings s1 and s2. Find the smallest window in the string s1 consisting of all the characters(including duplicates) of the string s2. Return "" in case no such window is present. If there are multiple such windows of the same length, return the one with the least starting index.
Note: All characters are in lowercase letters. 

Examples:

Input: s1 = "timetopractice", s2 = "toc"
Output: "toprac"
Explanation: "toprac" is the smallest substring in which "toc" can be found.
Input: s1 = "zoomlazapzo", s2 = "oza"
Output: "apzo"
Explanation: "apzo" is the smallest substring in which "oza" can be found.
Input: s1 = "zoom", s2 = "zooe"
Output: ""
Explanation: No window is present containing all characters of s2.
Constraints: 
1 ≤ |s1|, |s2| ≤ 105
s1,s2 consists of lowercase letters only


class Solution {
    // Function to find the smallest window in the string s consisting
    // of all the characters of string p.
    public static String smallestWindow(String s1, String s2) {
        // Your code here
        if(s1==null||s2==null||s1.length()<s2.length()) return "";
        HashMap<Character, Integer> s2Chars = new HashMap<>();
        HashMap<Character, Integer> hm = new HashMap<>();
        
        int l= 0;
        int minlength = Integer.MAX_VALUE;
        for(int i = 0;i<s2.length();i++){
            s2Chars.put(s2.charAt(i),s2Chars.getOrDefault(s2.charAt(i),0)+1);
        }
        int unique = s2Chars.size();
        int count = 0;
        int minstart = 0;
        for(int i = 0;i<s1.length();i++){
            char endChar = s1.charAt(i);
            hm.put(endChar, hm.getOrDefault(endChar,0)+1);
            if(s2Chars.containsKey(endChar)&&(hm.get(endChar).intValue()==s2Chars.get(endChar).intValue())){
                count++;
            }
            while(count==unique){
                
                if(minlength>i-l+1){
                    minlength = i-l+1;
                    minstart = l;
                }
                
                char startChar = s1.charAt(l);
                
                hm.put(startChar,hm.get(startChar)-1);
                
                if(s2Chars.containsKey(startChar)&&(hm.get(startChar).intValue()<s2Chars.get(startChar).intValue())){
                    count--;
                }
                l++;
                    
        
                
            }
        }
        return minlength == Integer.MAX_VALUE?"":s1.substring(minstart,minstart+minlength);
        
    }
}