Burning Tree

Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.

Examples : 

Input: root[] = [1,2,3,4,5,N,6,N,N,7,8,N,9,N,N,N,N,N,10],  target = 8
  
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 catches fire.
After 2 sec: 2, 7 catches fire.
After 3 sec: 4, 1 catches fire.
After 4 sec: 3 catches fire.
After 5 sec: 6 catches fire.
After 6 sec: 9 catches fire.
After 7 sec: 10 catches fire.
It takes 7s to burn the complete tree.
Input: root[] = [1, 2, 3, 4, 5, N, 7, 8, N, 10], target = 10

Output: 5
Explanation: If leaf with the value 10 is set on fire. 
- After 1 sec: Node 5 catches fire.
- After 2 sec: Node 2 catches fire.
- After 3 sec: Nodes 1 and 4 catches fire.
- After 4 sec: Node 3 and 8 catches fire.
- After 5 sec: Node 7 catches fire.
It takes 5s to burn the complete tree.
Constraints:
1 ≤ number of nodes ≤ 105
1 ≤ node->data ≤ 105




class Solution {
    /*class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            left = null;
            right = null;
        }
    }*/

    public static int minTime(Node root, int target) {
        // code here
        HashMap<Node,Node> parent = new HashMap<>();
        Node targetNode = findParent(root,parent,target);
        int time = findMinTime(root,targetNode,parent);
        return time;
    }
    static Node findParent(Node root, HashMap<Node,Node> parent, int target){
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        Node res = new Node(-1);
        while(!queue.isEmpty()){
            Node node = queue.poll();
            if(node.data==target) res = node;
            if(node.left!=null){
                parent.put(node.left,node);
                queue.offer(node.left);
            }
            if(node.right!=null){
                parent.put(node.right,node);
                queue.offer(node.right);
            }
            
        }
        return res;
    }
    static int findMinTime(Node root, Node targetNode, HashMap<Node,Node> parent){
        Queue<Node> queue = new LinkedList<>();
        HashMap<Node,Integer> visited = new HashMap<>();
        queue.offer(targetNode);
        visited.put(targetNode,1);
        int mini = 0;
        while(!queue.isEmpty()){
            int fl = 0;
            int size = queue.size();
            for(int i = 0;i<size;i++){
                Node node = queue.poll();
                if(node.left!=null && visited.get(node.left)==null){
                    fl = 1;
                    queue.offer(node.left);
                    visited.put(node.left,1);
                }
                if(node.right!=null && visited.get(node.right)==null){
                    fl = 1;
                    queue.offer(node.right);
                    visited.put(node.right,1);
                }
                if(parent.get(node)!=null && visited.get(parent.get(node))==null){
                    fl = 1;
                    queue.offer(parent.get(node));
                    visited.put(parent.get(node),1);
                }
            }
            if(fl==1) mini++;
        }
        return mini;
    }
}
