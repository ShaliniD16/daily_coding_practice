Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

 

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
Example 2:

Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
 

Constraints:

1 <= nums.length <= 200
-109 <= nums[i] <= 109
-109 <= target <= 109


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        int n = nums.length;
        int left;
        int right;
        List<List<Integer>> result = new ArrayList<>();
        
        for(int i = 0;i<n-3;i++){
            
            for(int j = i+1;j<n-2;j++){
                
                left = j+1;
                right = n-1;
                while(left<right){
                    long sum = (long)nums[i]+nums[j]+nums[left]+nums[right];
                    if(sum==target){
			List<Integer> list = new ArrayList<>();
                        list.add(nums[i]);
                        list.add(nums[j]);
                        list.add(nums[left]);
                        list.add(nums[right]); 
                        boolean exists = false;
                        for(List<Integer> li:result){
                            if(list.equals(li)) {exists = true;break;}
                        }
                        if(!exists){
                            result.add(list);
                        }
                        
                        left++;
                        right--;
                    }
                    else if(sum<target) left++;
                    else right--;
                }
            }
        }
        return result;
    }
}