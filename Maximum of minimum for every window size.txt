Maximum of minimum for every window size


Given an array of integers arr[] of size N, the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to N.

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=N.

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1.
2. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
3. Second element in output indicates maximum of minimums of all windows of size 2. 
4. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30].
5. Maximum of these minimums is 30 Third element in output indicates maximum of minimums of all windows of size 3. 
6. Minimums of windows of size 3 are [10], [20], [10], [10] and [10].
7. Maximum of these minimums is 20. Similarly other elements of output are computed.
Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed
Constraints:
1 <= arr.size() <= 105
1 <= arr[i] <= 106

class Solution {
    public ArrayList<Integer> maxOfMin(int[] arr) {
        int n = arr.length;

        int[] left = new int[n];
        int[] right = new int[n];

        Arrays.fill(left, -1);
        Arrays.fill(right, n);

        Deque<Integer> stack = new ArrayDeque<>();

        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                left[i] = stack.peek();
            }
            stack.push(i);
        }

        stack.clear();

        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                right[i] = stack.peek();
            }
            stack.push(i);
        }

        int[] result = new int[n + 1];

        for (int i = 0; i < n; i++) {
            int len = right[i] - left[i] - 1;
            result[len] = Math.max(result[len], arr[i]);
        }

        for (int i = n - 1; i >= 1; i--) {
            result[i] = Math.max(result[i], result[i + 1]);
        }

        ArrayList<Integer> res = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            res.add(result[i]);
        }

        return res;
    }
}
