Unique Subsets

Given an array arr[] of integers of size N that might contain duplicates, the task is to find all possible unique subsets.

Note: Each subset should be sorted.

Example 1:

Input: N = 3, arr[] = {2,1,2}
Output:(),(1),(1 2),(1 2 2),(2),(2 2)
Explanation: 
All possible subsets = (),(2),(1),(1,2),(2),(2,2),(2,1),(2,1,2)
After Sorting each subset = (),(2),(1),(1,2),(2),(2,2),(1,2),(1,2,2) 
Unique Susbsets in Lexicographical order = (),(1),(1,2),(1,2,2),(2),(2,2)
Example 2:

Input: N = 4, arr[] = {1,2,3,3}
Output: (),(1),(1 2),(1 2 3)
(1 2 3 3),(1 3),(1 3 3),(2),(2 3)
(2 3 3),(3),(3 3)
Your Task:
Your task is to complete the function AllSubsets() which takes the array arr[] and N as input parameters and returns list of all possible unique subsets in lexicographical order. 

Expected Time Complexity: O(2N).
Expected Auxiliary Space: O(2N * X), X = Length of each subset.

Constraints:
1 ≤ N ≤ 12
1 ≤ arr[i] ≤ 9



class solve {
    // Function to find all possible unique subsets.
    public ArrayList<ArrayList<Integer>> AllSubsets(int arr[], int n) {
        // your code here
        Arrays.sort(arr);
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        ArrayList<Integer> ds = new ArrayList<>();
        findSubsets(arr,0,n,res,ds);
        res.sort((a,b)->{
            int x = Math.min(a.size(),b.size());
            for(int i = 0;i<x;i++){
                if(!a.get(i).equals(b.get(i))){
                    return a.get(i)-b.get(i);
                }
            }
            return a.size()-b.size();
        });
        return res;
    }
    public void findSubsets(int[] arr, int ind, int n, ArrayList<ArrayList<Integer>> res,ArrayList<Integer> ds  ){
        if(ind==n){
            
            if(!res.contains(new ArrayList<>(ds))){
                res.add(new ArrayList<>(ds));
            }
            return;
        }
        ds.add(arr[ind]);
        findSubsets(arr, ind+1, n,res,ds);
        ds.remove(ds.size()-1);
        
        findSubsets(arr, ind+1, n, res, ds);
    }
}