Max rectangle

Given a binary matrix mat[][] of size n * m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Examples:

Input: mat[][] = [[0, 1, 1, 0],
                [1, 1, 1, 1],
                [1, 1, 1, 1],
                [1, 1, 0, 0]]
Output: 8
Explanation: The largest rectangle with only 1’s is from (1, 0) to (2, 3) which is
[1, 1, 1, 1]
[1, 1, 1, 1]
and area is 4 *2 = 8.
Input: mat[][] = [[0, 1, 1],
                [1, 1, 1],
                [0, 1, 1]]
Output: 6
Explanation: The largest rectangle with only 1’s is from (0, 1) to (2, 2) which is
[1, 1]
[1, 1]
[1, 1]
Constraints:
1<= mat.size(), mat[0].size()<=1000
0<=mat[][]<=1



class Solution {
    // Returns area of the largest rectangle with all 1s in mat[][]
    static int maxArea(int mat[][]) {
        // Your code here
        int[] hist = new int[mat[0].length];
        int maxarea = 0;
        for(int i = 0;i<mat.length;i++){
            for(int j = 0;j<mat[i].length;j++){
                if(mat[i][j]==1){
                    hist[j]+=1;
                }
                else{
                    hist[j]=0;
                }
            }
            maxarea = Math.max(maxarea,largestArea(hist));
        }
        
        return maxarea;
    }
    static int largestArea(int[] hist){
            Stack<Integer> s = new Stack<>();
            int top, maxarea = 0, currarea;
            int k = 0;
            
            while(k<hist.length){
                if(s.isEmpty()||hist[s.peek()]<=hist[k]){
                    s.push(k++);
                }
                else{
                    top = s.pop();
                    currarea = hist[top] * (s.isEmpty()?k:k-s.peek()-1);
                    maxarea=Math.max(currarea,maxarea);
                }
            }
            while(!s.isEmpty()){
                top = s.pop();
                currarea = hist[top] * (s.isEmpty()?k:k-s.peek()-1);
                maxarea=Math.max(currarea,maxarea);
            }
            return maxarea;
    }
}
