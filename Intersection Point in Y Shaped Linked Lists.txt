Intersection Point in Y Shaped Linked Lists


Given two singly linked lists, return the point where two linked lists intersect.

Note: If the linked lists do not merge at any point, return -1.

Examples:

Input: Linked list 1: 4->4->4->4->4, Linked list 2: 4->4->4
 
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4->4 whose starting point is 4.

Input: Linked list 1: 4->1->8->4->5, Linked List 2: 5->6->1->8->4->5
 
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8->4->5 whose starting point is 8.
Input: Linked list 1: 1->2->3, Linked list 2: 4->5->6
Output: -1
Explanation: There is no common part, so there is no interaction point.
Expected Time Complexity: O(n+m)
Expected Space Complexity: O(1)

Constraints:
2 ≤ size of first linkedist + size of second linkedlist ≤ 2*105
-1000 ≤ data of nodes ≤ 1000

Challenge : Try to solve the problem without using any extra space.

class Intersect {
    // Function to find intersection point in Y shaped Linked Lists.
    int intersectPoint(Node head1, Node head2) {
        // code here
        
        int count1=getlength(head1);
        int count2 = getlength(head2);
        if(count1>count2) head1 = move(head1,count1-count2);
        else if(count2>count1) head2  = move(head2,count2-count1);
        while(head1!=null && head2!=null){
            if(head1==head2){
                return head1.data;
            }
            head1=head1.next;
            head2 = head2.next;
        }
        return -1;
        
    }
    static Node move(Node h,int steps){
        while(steps-- > 0 && h!=null){
            h = h.next;
        }
        return h;
    }
    static int getlength(Node h){
        int count = 0;
        while(h!=null){
            count++;
            h=h.next;
        }
        return count;
    }
}