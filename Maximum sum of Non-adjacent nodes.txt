Maximum sum of Non-adjacent nodes


Given a binary tree with a value associated with each node, we need to choose a subset of these nodes such that the sum of chosen nodes is maximum under a constraint that no two chosen nodes in the subset should be directly connected that is, if we have taken a node in our sum then we can’t take its any children or parents in consideration and vice versa.

Examples:

Input:

Output: 11
Explanation: The maximum sum is sum of node 11.

Input:
 
Output: 16
Explanation: The maximum sum is sum of nodes 1 4 5 6, i.e 16. These nodes are non adjacent.

Constraints:
1 ≤ Number of nodes in the tree ≤ 104
1 ≤ Value of each node ≤ 105


class Solution
{
    HashMap<Node, Integer> hm = new HashMap<>();
    //Function to return the maximum sum of non-adjacent nodes.
    int getMaxSum(Node root)
    {
        // add your code here
        if(root==null) return 0;
        if(hm.containsKey(root)) return hm.get(root);
        
        int withRoot = root.data;
        if(root.left!=null){
            withRoot+= getMaxSum(root.left.left);
            withRoot+= getMaxSum(root.left.right);
        }
        if(root.right!=null){
            withRoot+= getMaxSum(root.right.left);
            withRoot+= getMaxSum(root.right.right);
        }
        
        int withoutRoot = getMaxSum(root.left) + getMaxSum(root.right);
        
        hm.put(root,Math.max(withRoot,withoutRoot));
        return hm.get(root);
        
    }
}