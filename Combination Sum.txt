Combination Sum

Given an array arr[] and a target, your task is to find all unique combinations in the array where the sum is equal to target. The same number may be chosen from the array any number of times to make target.

You can return your answer in any order.

Examples:

Input: arr[] = [2, 4, 6, 8], target = 8
Output: [[2 2 2 2] [2 2 4] [2 6] [4 4] [8]]
Explanation: Total number of possible combinations are 5.
Input: arr[] = [2, 7, 6, 5], target = 16
Output: [[2 2 2 2 2 2 2 2] [2 2 2 2 2 6] [2 2 2 5 5] [2 2 5 7] [2 2 6 6] [2 7 7] [5 5 6]]
Explanation: Total number of possible combinations are 7.
Input: arr[] = [6, 5, 7], target = 8
Output: []
Explanation: There are no possible combinantions such that target sum is 8.
Constraints:
1 <= arr.size() <= 30
2 <= arr[i] <= 40
2 <= target <= 40
All arr[i] are distinct.

class Solution {
    // Function to find all combinations of elements
    // in array arr that sum to target.
    ArrayList<ArrayList<Integer>> combinationSum(int[] arr, int target) {
        // add your code here
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        findCombinations(0,target,new ArrayList<>(),ans,arr);
        return ans;
    }
    public void findCombinations(int ind, int target, ArrayList<Integer> ds, ArrayList<ArrayList<Integer>> ans,int[] arr){
        if(ind==arr.length){
            if(target==0){
                ans.add(new ArrayList<>(ds));
            }
            return;
        }
        if(target>=arr[ind]){
            ds.add(arr[ind]);
            findCombinations(ind,target-arr[ind],ds,ans,arr);
            ds.remove(ds.size()-1);
        }
        findCombinations(ind+1,target,ds,ans,arr);
    }
}