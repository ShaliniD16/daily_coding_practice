Index of first 1 in a sorted array of 0s and 1s

Given a sorted array consisting 0s and 1s. The task is to find the index of first 1 in the given array.

NOTE: If one is not present then, return -1.

Example 1:

Input : 
arr[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1}
Output : 
6
Explanation:
The index of first 1 in the array is 6.


Example 2:
Input : 
arr[] = {0, 0, 0, 0}
Output : 
-1
Explanation:
1's are not present in the array.
 
 
Your Task:  
You don't need to read input or print anything. Your task is to complete the function firstIndex() which takes the array A[] and its size N as inputs and returns the index of first 1. If 1 is not present in the array then return -1.


Expected Time Complexity: O(Log (N))
Expected Auxiliary Space: O(1)

class Solution {
    
    public long firstIndex(long arr[], long n)
    {
        // Your code goes here
        long index = 1l;
        while(index<n && arr[(int)index]==0){
            index = index * 2;
        }
        if (index >= n) {
            index = n - 1;
        }
        long low = index/2;
        long high = index;
        while(low<high){
            long mid = (low+high)/2;
            if(arr[(int)mid]==1) high = mid;
            else low = mid+1;
        }
        if (low < n && arr[(int) low] == 1) {
            return low;
        } else {
            return -1; 
        }
    }
}