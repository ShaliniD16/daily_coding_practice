Find the first node of loop in linked list

Given a singly linked list's head. Find the first node of the loop if the linked list has a loop. If a loop is present return the node data of the first node of the loop else return -1.

Examples:

Input:
 
Output: 3
Explanation:
We can see that there exists a loop in the given linked list and the first node of the loop is 3.
Input:
 
Output: -1
Explanation: No loop exists in the above linked list.So the output is -1.
Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

class Solution {
    // Function to find first node if the linked list has a loop.
    public static int findFirstNode(Node head) {
        // code here
        Node slow = head;
        Node fast = head;
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow==fast){
                slow = head;
                while(slow!=fast){
                    slow = slow.next;
                    fast = fast.next;
                    
                }
                return slow.data;
            }
        }
        return -1;
    }
}