Count BST nodes that lie in a given range


Given a Binary Search Tree (BST) and a range l-h (inclusive), your task is to return the number of nodes in the BST whose value lie in the given range.

Examples :

Input: root[] = [10, 5, 50, 1, N, 40, 100], l = 5, h = 45
         
Output: 3
Explanation: There are three nodes in range [5, 45] =  5, 10 and 40.
Input: root[] = [10, 5, 50, 1, N, 40, 100], l = 10, h = 100
         
Output: 4
Explanation: There are four nodes in range [10, 100] = 10, 40, 50 and 100.
Input: root[] = [1, 2, 3], l = 23, h = 95
         
Output: 0
Explanation: There are no nodes in range [23, 95].
Constraints:
1 <= Number of nodes <= 105
1 <= l <= h < =105


class Solution {
    int getCount(Node root, int l, int h) {
        // Your code here
        int[] count = new int[1];
        getCountUtil(root,l,h,count);
        return count[0];
    }
    static void getCountUtil(Node root, int l, int h, int[] count){
        if(root==null) return;
        if(root.data>=l && root.data<=h){
            count[0] = count[0]+1;
            getCountUtil(root.left,l,h,count);
            getCountUtil(root.right,l,h,count);
        }
        else if(root.data<l) getCountUtil(root.right,l,h,count);
        else getCountUtil(root.left,l,h,count);
        
        
    }
}