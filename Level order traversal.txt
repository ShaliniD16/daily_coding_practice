Level order traversal


Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.

Examples:

Input: root = [1, 3, 2]
    1
  /   \ 
 3     2
Output: [[1], [3, 2]]
Input: root = [10, 20, 30, 40, 60]
        10
     /      \
    20       30
  /   \
 40   60
Output: [[10], [20, 30], [40, 60]]
Input: root = [1, 3, 2, N, N, N, 4, 6, 5]
    1
  /   \ 
 3     2
        \
         4
        / \
       6   5
Output: [[1], [3, 2], [4], [6, 5]]
Constraints:

1 ≤ number of nodes ≤ 105
0 ≤ node->data ≤ 109

class Solution {
    // Function to return the level order traversal of a tree.
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) {
        // Your code here
        Queue<Node> q = new LinkedList<>();
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        if(root==null) return ans;
        q.offer(root);
        while(!q.isEmpty()){
            int len = q.size();
            ArrayList<Integer> li = new ArrayList<>();
            for(int i = 0;i<len;i++){
                if(q.peek().left!=null) q.offer(q.peek().left);
                if(q.peek().right!=null) q.offer(q.peek().right);
                li.add(q.poll().data);
            }
            ans.add(li);
        }
        return ans;
    }
}
