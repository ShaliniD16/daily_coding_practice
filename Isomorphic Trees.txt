Isomorphic Trees


Given two Binary Trees. Check whether they are Isomorphic or not.

Note: 
Two trees are called isomorphic if one can be obtained from another by a series of flips, i.e. by swapping left and right children of several nodes. Any number of nodes at any level can have their children swapped. Two empty trees are isomorphic.
For example, the following two trees are isomorphic with the following sub-trees flipped: 2 and 3, NULL and 6, 7 and 8.
ISomorphicTrees

Examples:

Input: root1[] = [1, 2, 3, 4, 5, 7, 6, N, 7, 8], root2[] = [1, 3, 2, N, 6, 4, 5, 8, 7]

ISomorphicTrees
Output: true
Input: root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, 4]
     1            1  
    / \          /    \  
  2    3      3       2  
 /           /  
4          4
Output: false
Input: root1[] = [1, 2, 3, 4], root2[] = [1, 3, 2, N, N, N, 4]

     1           1
    /  \         /   \
   2    3      3     2
  /                    \
 4                        4
Output: true
Constraints:
1<=number of nodes<=105
1<= node->data <=105

class Solution {
    // Return True if the given trees are isomotphic. Else return False.
    boolean isIsomorphic(Node root1, Node root2) {
        // code here
        if(root1==null && root2==null) return true;
        if(root1==null||root2==null) return false;
        if(root1.data!=root2.data) return false;
        boolean c1 = isIsomorphic(root1.left,root2.left)&&isIsomorphic(root1.right,root2.right);
        boolean c2 = isIsomorphic(root1.left,root2.right)&&isIsomorphic(root1.right,root2.left);
        return c1||c2;
    }
}