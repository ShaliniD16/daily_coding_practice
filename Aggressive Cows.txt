Aggressive Cows

You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:

Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.
Example 2:

Input:
n=5 
k=3
stalls = [10 1 2 7 5]
Output:
4
Explanation:
The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4,
which also is the largest among all possible ways.
Your Task:
Complete the function int solve(), which takes integer n, k, and a vector stalls with n integers as input and returns the largest possible minimum distance between cows.

Expected Time Complexity: O(n*log(10^9)).
Expected Auxiliary Space: O(1).


class Solution {
    public static int solve(int n, int k, int[] stalls) {
        Arrays.sort(stalls);
        int low = 1;
        int high = stalls[n-1]-stalls[0];
        int mid=0,t;
        while(low<=high){
            mid = (low+high)/2;
            t = 1;
            int pos = stalls[0];
            for(int i = 1;i<n;i++){
                if(stalls[i]-pos>=mid){
                    t++;
                    pos = stalls[i];
                    if(t==k) break;
                }
            }
            if(t>=k) low = mid+1;
            else high = mid-1;
        }
        return high;
    }
}


class Solution {
    public static int solve(int n, int k, int[] stalls) {
        Arrays.sort(stalls);
        int low = 1;
        int high = stalls[n-1]-stalls[0];
        int mid=0,t;
        while(low<=high){
            mid = (low+high)/2;
            t = k-1;
            int pos = stalls[0];
            int i = 1;
            while(t>0){
                
                
                while(i<n && stalls[i]-pos<mid){
                    i++;
                }
                if(i>=n){
                    
                    
                    break;
                }
                else {
                    t--;
                    pos = stalls[i];
                    i++;
                }
            }
            if(t==0) low = mid+1;
            else high = mid-1;
        }
        return high;
    }
}