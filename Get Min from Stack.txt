Get Min from Stack

Given q queries, implement a Stack with three functionalities:

Push an integer x onto the stack.
Pop the top element from the stack and return it. If the stack is empty, return -1.
GetMin, which retrieves the minimum element in the stack O(1) time. If the stack is empty, return -1.
Each query can be one of the following:

1 x: Push x onto the stack.
2: Pop the top element from the stack and return it.
3: Return the minimum element currently in the stack.
Examples:

Input: q = 6, queries = [(1 2), (1 3), (2), (3), (1 1), (3)]
Output: 3, 2, 1
Explanation: 
push(2): Stack is {2}
push(3): Stack is {2, 3}
pop(): Removes 3, stack is {2}
getMin(): Minimum element is 2
push(1): Stack is {2, 1}
getMin(): Minimum element is 1
Input: q = 4, queries = [(1, 4), (1, 2), (3), (2)]
Output: 2, 2
Explanation: 
Push 4 onto the stack. Stack is now {4}.
Push 2 onto the stack. Stack is now {4, 2}.
Get the minimum element, which is 2.
Pop the top element (2) from the stack. Stack is now {4}.
Input: q = 5, queries = [(1, 10), (3), (1, 5), (3), (2)]
Output: 10, 5, 5
Explanation: 
Push 10 onto the stack. Stack is now {10}.
Get the minimum element, which is 10.
Push 5 onto the stack. Stack is now {10, 5}.
Get the minimum element, which is 5.
Pop the top element (5) from the stack. Stack is now {10}.
Constraints:
1 <= q <= 100
1 <= values on the stack <= 100


class GfG
{
    int minEle;
    Stack<Integer> s;
    
    // Constructor    
    GfG()
	{
	    s = new Stack<>();

	}
	
    /*returns min element from stack*/
    int getMin()
    {
	// Your code here
	if(s.isEmpty()){
	    return -1;
	}
	return minEle;
    }
    
    /*returns poped element from stack*/
    int pop()
    {
	// Your code here
	if(s.isEmpty()){
	    return -1;
	}
	int y = s.pop();
	if(y>=minEle){
	    return y;
	}
	else{
	    int x = minEle;
	    minEle = 2*minEle-y;
	    return x;
	}
    }

    /*push element x into the stack*/
    void push(int x)
    {
	// Your code here	
	if(s.isEmpty()){
	    minEle = x;
	    s.push(x);
	}
	else{
	    if(x>=minEle){
	        s.push(x);
	    }
	    else{
	        s.push(2*x-minEle);
	        minEle = x;
	   }
	}
    }	
}