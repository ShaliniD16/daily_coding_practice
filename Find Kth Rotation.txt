Find Kth Rotation

Given a increasing sorted rotated array arr of distinct integers. The array is right-rotated k times. Find the value of k.
Let's suppose we have an array arr = [2, 4, 6, 9], so if we rotate it by 2 times so that it will look like this:
After 1st Rotation : [9, 2, 4, 6]
After 2nd Rotation : [6, 9, 2, 4]

Examples:

Input: arr = [5, 1, 2, 3, 4]
Output: 1
Explanation: The given array is 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.
Input: arr = [1, 2, 3, 4, 5]
Output: 0
Explanation: The given array is not rotated.
Expected Time Complexity: O(log(n))
Expected Auxiliary Space: O(1)


class Solution {
    public int findKRotation(List<Integer> arr) {
        return bin(0, arr.size() - 1, arr);
    }

    private int bin(int low, int high, List<Integer> arr) {
        if (low > high) {
            return 0; 
        }
        
        if (low == high) {
            return low; // Only one element left, which must be the smallest.
        }

        int mid = (low + high) / 2;

        // Check if mid+1 is the smallest element
        if (mid < high && arr.get(mid) > arr.get(mid + 1)) {
            return mid + 1;
        }

        // Check if mid is the smallest element
        if (mid > low && arr.get(mid) < arr.get(mid - 1)) {
            return mid;
        }

        // Decide whether we need to go to the left half or the right half
        if (arr.get(high) >= arr.get(mid)) {
            // The right half is sorted, so the smallest element must be in the left half
            return bin(low, mid - 1, arr);
        } else {
            // The left half is sorted, so the smallest element must be in the right half
            return bin(mid + 1, high, arr);
        }
    }
}
