Reorder List



Given a singly linked list: A0→A1→...→An-2→An-1, reorder it to A0→An-1→A1→An-2→A2→An-3→...
For example: Given 1->2->3->4->5 its reorder is 1->5->2->4->3.

Examples:

Input: LinkedList: 1->2->3
Output: 1->3->2
Explanation: Here n=3, so the correct order is A0→A2→A1

Input: LinkedList: 1->7->3->4
Output: 1->4->7->3
Explanation: Here n=4, so the correct order is A0→A3→A1→A2
Note: Try to solve without using any auxiliary space.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= no. of nodes <= 106
0 <= node->data <= 106



class Solution {
    void reorderlist(Node head) {
        // Your code here
        Node slow = head;
        Node fast = head;
        while(fast.next!=null && fast.next.next!=null){
            slow = slow.next;
            fast = fast.next.next;
        }
        Node second = reverse(slow.next);
        Node t = head;
        slow.next = null;
        Node next = null;
        while(t.next!=null){
            next = t.next;
            t.next = second;
            
            second = second.next; 
            
            
            t.next.next = next;
            t = next;
        }
        t.next = second;
        
    }
    static Node reverse(Node head){
        Node curr = head,prv = null, next = null;
        while(curr!=null){
            next = curr.next;
            curr.next = prv;
            prv = curr;
            curr = next;        
            
        }
        return prv;
    }
    
}