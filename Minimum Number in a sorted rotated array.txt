Minimum Number in a sorted rotated array]


Given an array of distinct elements which was initially sorted. This array may be rotated at some unknown point. The task is to find the minimum element in the given sorted and rotated array. 

Example 1:

Input:
N = 10
arr[] = {2,3,4,5,6,7,8,9,10,1}
Output: 1
Explanation: The array is rotated 
once anti-clockwise. So minimum 
element is at last index (n-1) 
which is 1.
Example 2:

Input:
N = 5
arr[] = {3,4,5,1,2}
Output: 1
Explanation: The array is rotated 
and the minimum element present is
at index (n-2) which is 1.


class Solution
{
    //Function to find the minimum element in sorted and rotated array.
    static int minNumber(int arr[], int low, int high)
    {
        // Your code here
        if (high < low) {
            return arr[0];  // array is not rotated at all
        }
        
        if (high == low) {
            return arr[low];  // only one element left
        }
        
        int mid = low + (high - low) / 2;  // find mid

        // Check if mid+1 is the minimum element
        if (mid < high && arr[mid + 1] < arr[mid]) {
            return arr[mid + 1];
        }

        // Check if mid itself is the minimum element
        if (mid > low && arr[mid] < arr[mid - 1]) {
            return arr[mid];
        }

        // Decide whether we need to go to the left half or the right half
        if (arr[high] > arr[mid]) {
            return minNumber(arr, low, mid - 1);  // left half
        } else {
            return minNumber(arr, mid + 1, high);  // right half
        }
    }
}