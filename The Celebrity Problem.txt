The Celebrity Problem


A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people.  A square matrix mat (n*n) is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

Examples:

Input: mat[][] = [[0 1 0], [0 0 0], [0 1 0]]
Output: 1
Explanation: 0th and 2nd person both know 1. Therefore, 1 is the celebrity. 
Input: mat[][] = [[0 1], [1 0]]
Output: -1
Explanation: The two people at the party both know each other. None of them is a celebrity.
Input: mat[][] = [[0]]
Output: 0
Constraints:
1 <= mat.size()<= 3000
0 <= mat[i][j]<= 1



class Solution {
    // Function to find if there is a celebrity in the party or not.
    public int celebrity(int mat[][]) {
        // code here
        Stack<Integer> maybeCeleb = new Stack<>();
        int n = mat.length;
        boolean intro = true;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(mat[i][j]==1){
                    intro = false;
                    break;
                }
                
            }
            if(intro==true){
                maybeCeleb.push(i);
            }
            intro = true;
        }
        
        while(!maybeCeleb.isEmpty()){
            int top = maybeCeleb.pop();
            int count=0;
            for(int i = 0;i<n;i++){
                
                if(mat[i][top]==1){
                    count+=1;
                }
            } 
            if(count==n-1){
                return top;
            }
        }
        return -1;
        
    }
}