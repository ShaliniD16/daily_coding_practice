Merge two BST 's


Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input: root1 = [5, 3, 6, 2, 4]
       5
     /   \
    3     6
   / \
  2   4 
root2 = [2, 1, 3, N, N, N, 7, 6, N]
        2
      /   \
     1     3
            \
             7
            /
           6
Output: [1, 2, 2, 3, 3, 4, 5, 6, 6, 7]
Explanation: After merging and sorting the two BST we get [1, 2, 2, 3, 3, 4, 5, 6, 6, 7].
Input: root1 = [12, 9, N, 6, 11]
       12
     /   
    9
   / \    
  6   11
root2 = [8, 5, 10, 2]
      8
    /  \
   5    10
  /
 2
Output: [2, 5, 6, 8, 9, 10, 11, 12]
Explanation: After merging and sorting the two BST we get [2, 5, 6, 8, 9, 10, 11, 12].
Constraints:
1 ≤ number of nodes, root->data ≤ 105



/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}

*/
class SNode{
    SNode next;
    Node t;
    SNode head;
    void push(Node n){
        SNode tmp = new SNode();
        tmp.t = n;
        tmp.next = this.head;
        this.head = tmp;
    }
    Node pop(){
        SNode popped;
        popped = this.head;
        head = head.next;
        return popped.t;
    }
    boolean isEmpty(){
        if(this.head==null) return true;
        return false;
    }
}
class Solution {
    // Function to return a list of integers denoting the node
    // values of both the BST in a sorted order.
    public ArrayList<Integer> merge(Node root1, Node root2) {
        // Write your code here
        ArrayList<Integer> res = new ArrayList<>();
        SNode s1 = new SNode();
        SNode s2 = new SNode();
        Node curr1 = root1;
        Node curr2 = root2;
        if(root1==null){
            inorder(root2,res);
            return res;
        }
        else if(root2==null){
            inorder(root1,res);
            return res;
        }
        while(curr1!=null || curr2!=null || !s1.isEmpty() ||!s2.isEmpty()){
            if(curr1!=null ||curr2!=null){
                if(curr1!=null){
                    s1.push(curr1);
                    curr1 = curr1.left;
                }
                if(curr2!=null){
                    s2.push(curr2);
                    curr2 = curr2.left;
                }
            }
            else{
                if(s1.isEmpty()){
                    while(!s2.isEmpty()){
                        curr2 = s2.pop();
                        curr2.left = null;
                        inorder(curr2,res);
                        
                    }
                    return res;
                }
                if(s2.isEmpty()){
                    while(!s1.isEmpty()){
                        curr1 = s1.pop();
                        curr1.left = null;
                        inorder(curr1,res);
                        
                    }
                    return res;
                }
                curr1 = s1.pop();
                curr2 = s2.pop();
                if(curr1.data<=curr2.data){
                    res.add(curr1.data);
                    curr1 = curr1.right;
                    s2.push(curr2);
                    curr2 = null;
                }
                else if(curr1.data>curr2.data){
                    res.add(curr2.data);
                    curr2 = curr2.right;
                    s1.push(curr1);
                    curr1 = null;
                }
            }
        
        }
        return res;
    }
    void inorder(Node root, ArrayList<Integer> res){
        if(root!=null){
            inorder(root.left,res);
            res.add(root.data);
            inorder(root.right,res);
        }
    }
    
}